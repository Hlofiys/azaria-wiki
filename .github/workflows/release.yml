name: Release and Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag event
            type=ref,event=tag
            # Semantic versioning
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest for releases
            type=raw,value=latest,enable={{is_default_branch}}
            # Stable tag
            type=raw,value=stable
          labels: |
            org.opencontainers.image.title=Azaria Wiki
            org.opencontainers.image.description=Medieval-Dep-Punk Universe Wiki - Production Release
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=MIT

      - name: Build and push release image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Sign container image
        uses: sigstore/cosign-installer@v3

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build.outputs.digest }}

  security-scan:
    needs: release-build
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.release-build.outputs.image-digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.release-build.outputs.image-digest }}
          output-file: sbom.spdx.json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  integration-test:
    needs: release-build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and test release image
        run: |
          # Pull the release image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.release-build.outputs.image-digest }}
          
          # Run comprehensive tests
          docker run -d --name azaria-wiki-release-test \
            -p 8080:8080 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.release-build.outputs.image-digest }}
          
          # Wait for container to fully start
          sleep 15
          
          # Test health endpoint
          curl -f http://localhost:8080/health || exit 1
          echo "✅ Health check passed"
          
          # Test main page loads
          curl -f http://localhost:8080/ | grep -q "Азария" || exit 1
          echo "✅ Main page loads correctly"
          
          # Test category pages
          curl -f http://localhost:8080/characters || exit 1
          echo "✅ Characters page accessible"
          
          curl -f http://localhost:8080/locations || exit 1
          echo "✅ Locations page accessible"
          
          # Test static assets
          curl -f http://localhost:8080/favicon.ico || exit 1
          echo "✅ Static assets accessible"
          
          # Check container logs for errors
          docker logs azaria-wiki-release-test
          
          # Cleanup
          docker stop azaria-wiki-release-test
          docker rm azaria-wiki-release-test

  create-deployment-manifest:
    needs: [release-build, security-scan, integration-test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Create deployment manifest
        run: |
          cat > deployment-manifest.yml << EOF
          # Azaria Wiki Deployment Manifest
          # Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          # Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.release-build.outputs.image-digest }}
          
          version: '3.8'
          services:
            azaria-wiki:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.release-build.outputs.image-digest }}
              container_name: azaria-wiki-production
              restart: unless-stopped
              ports:
                - "80:8080"
              environment:
                - NODE_ENV=production
              deploy:
                resources:
                  limits:
                    memory: 256M
                    cpus: '0.5'
                  reservations:
                    memory: 128M
                    cpus: '0.25'
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              security_opt:
                - no-new-privileges:true
              read_only: true
              tmpfs:
                - /var/cache/nginx:noexec,nosuid,size=50m
                - /var/run:noexec,nosuid,size=50m
                - /tmp:noexec,nosuid,size=50m
          EOF

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deployment-manifest.yml

      - name: Comment on release
        if: github.event_name == 'release'
        uses: actions/github-script@v7
        with:
          script: |
            const release = context.payload.release;
            const body = `🚀 **Deployment Ready!**
            
            **Docker Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.release-build.outputs.image-digest }}\`
            
            **Quick Deploy:**
            \`\`\`bash
            docker run -d -p 80:8080 \\
              --name azaria-wiki \\
              --restart unless-stopped \\
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            \`\`\`
            
            **Docker Compose:**
            Download the deployment manifest from the artifacts section.
            
            **Security:**
            - ✅ Vulnerability scan completed
            - ✅ Container signed with Cosign
            - ✅ SBOM generated
            - ✅ Integration tests passed
            `;
            
            github.rest.issues.createComment({
              issue_number: release.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });